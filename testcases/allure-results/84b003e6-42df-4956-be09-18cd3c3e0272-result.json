{"name": "None", "status": "broken", "statusDetails": {"message": "BaseException: 切换到iframe:【{'name': 'body frame', 'type': 'xpath', 'value': '//*[@class=\"APP-editor-edtr\"]/iframe'}】失败:Message: invalid argument: missing 'ELEMENT'\n  (Session info: chrome=138.0.7204.102)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff640b57005+76917]\n\tGetHandleVerifier [0x0x7ff640b57060+77008]\n\t(No symbol) [0x0x7ff640909dea]\n\t(No symbol) [0x0x7ff6409b2ac3]\n\t(No symbol) [0x0x7ff64098846a]\n\t(No symbol) [0x0x7ff6409b065c]\n\t(No symbol) [0x0x7ff640988243]\n\t(No symbol) [0x0x7ff640951431]\n\t(No symbol) [0x0x7ff6409521c3]\n\tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\n\tGetHandleVerifier [0x0x7ff640e27983+3028467]\n\tGetHandleVerifier [0x0x7ff640e4591d+3151245]\n\tGetHandleVerifier [0x0x7ff640b718ce+185662]\n\tGetHandleVerifier [0x0x7ff640b7978f+218111]\n\tGetHandleVerifier [0x0x7ff640b5fb84+112628]\n\tGetHandleVerifier [0x0x7ff640b5fd39+113065]\n\tGetHandleVerifier [0x0x7ff640b46d08+10616]\n\tBaseThreadInitThunk [0x0x7fff25c97034+20]\n\tRtlUserThreadStart [0x0x7fff27782651+33]", "trace": "self = <common.driver.DriverOperate object at 0x0000028CAD6A1E40>\nframe = {'name': 'body frame', 'type': 'xpath', 'value': '//*[@class=\"APP-editor-edtr\"]/iframe'}\n\n    def switch_to_frame(self, frame):\n        try:\n>           self.driver.switch_to.frame(frame)\n\n..\\common\\driver.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\dev\\python\\python3.10.4\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:94: in frame\n    self._driver.execute(Command.SWITCH_TO_FRAME, {'id': frame_reference})\nD:\\dev\\python\\python3.10.4\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028CAD6A1CF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: missing \\'ELEMENT\\'\\\\n  (S...ff640b46d08+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff25c97034+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fff27782651+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: missing 'ELEMENT'\nE         (Session info: chrome=138.0.7204.102)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff640b57005+76917]\nE       \tGetHandleVerifier [0x0x7ff640b57060+77008]\nE       \t(No symbol) [0x0x7ff640909dea]\nE       \t(No symbol) [0x0x7ff6409b2ac3]\nE       \t(No symbol) [0x0x7ff64098846a]\nE       \t(No symbol) [0x0x7ff6409b065c]\nE       \t(No symbol) [0x0x7ff640988243]\nE       \t(No symbol) [0x0x7ff640951431]\nE       \t(No symbol) [0x0x7ff6409521c3]\nE       \tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\nE       \tGetHandleVerifier [0x0x7ff640e27983+3028467]\nE       \tGetHandleVerifier [0x0x7ff640e4591d+3151245]\nE       \tGetHandleVerifier [0x0x7ff640b718ce+185662]\nE       \tGetHandleVerifier [0x0x7ff640b7978f+218111]\nE       \tGetHandleVerifier [0x0x7ff640b5fb84+112628]\nE       \tGetHandleVerifier [0x0x7ff640b5fd39+113065]\nE       \tGetHandleVerifier [0x0x7ff640b46d08+10616]\nE       \tBaseThreadInitThunk [0x0x7fff25c97034+20]\nE       \tRtlUserThreadStart [0x0x7fff27782651+33]\n\nD:\\dev\\python\\python3.10.4\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_send_email.TestSend object at 0x0000028CAD6A2BC0>\naddress = '2331651152@qq.com', theme = '自动化测试的主题啦啦啦啦啦2', body = '六婶火222222锅'\nsuccess = True, expect_result = None\n\n    @pytest.mark.parametrize(\"address, theme, body, success, expect_result\", parameter)\n    def test_send(self, address, theme, body, success, expect_result):\n        allure.dynamic.title(f'{expect_result}')\n    \n        global global_var\n        if global_var == 0:\n            global_var = 1\n            LoginActions().Login(\"wulilin55\", \"Wu@200255Lilin\")\n    \n        PageSendEmail().switch_frame_to_default()\n>       SendEmailActions().SendEmail(address, theme, body)\n\ntest_send_email.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\actions\\send_emailactions.py:17: in SendEmail\n    page.page_enter_body_frame()\n..\\pages\\page_send_email.py:50: in page_enter_body_frame\n    self.operate.switch_to_frame(ele_info)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.driver.DriverOperate object at 0x0000028CAD6A1E40>\nframe = {'name': 'body frame', 'type': 'xpath', 'value': '//*[@class=\"APP-editor-edtr\"]/iframe'}\n\n    def switch_to_frame(self, frame):\n        try:\n            self.driver.switch_to.frame(frame)\n            self.logger.info(f'切换到iframe:【{frame}】成功')\n        except BaseException as e:\n            self.logger.exception(f'切换到iframe:【{frame}】失败')\n>           raise BaseException(f'切换到iframe:【{frame}】失败:{e}')\nE           BaseException: 切换到iframe:【{'name': 'body frame', 'type': 'xpath', 'value': '//*[@class=\"APP-editor-edtr\"]/iframe'}】失败:Message: invalid argument: missing 'ELEMENT'\nE             (Session info: chrome=138.0.7204.102)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff640b57005+76917]\nE           \tGetHandleVerifier [0x0x7ff640b57060+77008]\nE           \t(No symbol) [0x0x7ff640909dea]\nE           \t(No symbol) [0x0x7ff6409b2ac3]\nE           \t(No symbol) [0x0x7ff64098846a]\nE           \t(No symbol) [0x0x7ff6409b065c]\nE           \t(No symbol) [0x0x7ff640988243]\nE           \t(No symbol) [0x0x7ff640951431]\nE           \t(No symbol) [0x0x7ff6409521c3]\nE           \tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\nE           \tGetHandleVerifier [0x0x7ff640e27983+3028467]\nE           \tGetHandleVerifier [0x0x7ff640e4591d+3151245]\nE           \tGetHandleVerifier [0x0x7ff640b718ce+185662]\nE           \tGetHandleVerifier [0x0x7ff640b7978f+218111]\nE           \tGetHandleVerifier [0x0x7ff640b5fb84+112628]\nE           \tGetHandleVerifier [0x0x7ff640b5fd39+113065]\nE           \tGetHandleVerifier [0x0x7ff640b46d08+10616]\nE           \tBaseThreadInitThunk [0x0x7fff25c97034+20]\nE           \tRtlUserThreadStart [0x0x7fff27782651+33]\n\n..\\common\\driver.py:163: BaseException"}, "attachments": [{"name": "log", "source": "eb0233d3-f175-46b1-ba3a-4dae64040cb2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "address", "value": "'2331651152@qq.com'"}, {"name": "theme", "value": "'自动化测试的主题啦啦啦啦啦2'"}, {"name": "body", "value": "'六婶火222222锅'"}, {"name": "success", "value": "True"}, {"name": "expect_result", "value": "None"}], "start": 1752825197737, "stop": 1752825206115, "uuid": "bec149bc-6524-47ab-af8b-230a6adf2215", "historyId": "2959a7522a8bea9ce254ad98ba30bc0f", "testCaseId": "7cbe8fc4e09c11fc1c4e46043da50016", "fullName": "testcases.test_send_email.TestSend#test_send", "labels": [{"name": "epic", "value": "163邮箱网站发送邮件测试"}, {"name": "feature", "value": "发送邮件测试"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_send_email"}, {"name": "subSuite", "value": "TestSend"}, {"name": "host", "value": "DESKTOP-LOC9ENU"}, {"name": "thread", "value": "6188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_send_email"}]}