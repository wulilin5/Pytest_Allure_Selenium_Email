{"name": "请填写收件人地址后再发送", "status": "broken", "statusDetails": {"message": "BaseException: 定位元素【收件人】,通过【xpath】,值是【//*[@id=\"dvContainer\"]/div[2]/div[1]/section/header/div[1]/div[1]/div/div[2]/div/input】,定位失败:Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff640b57005+76917]\n\tGetHandleVerifier [0x0x7ff640b57060+77008]\n\t(No symbol) [0x0x7ff640909dea]\n\t(No symbol) [0x0x7ff640960256]\n\t(No symbol) [0x0x7ff64096050c]\n\t(No symbol) [0x0x7ff6409b3887]\n\t(No symbol) [0x0x7ff6409884af]\n\t(No symbol) [0x0x7ff6409b065c]\n\t(No symbol) [0x0x7ff640988243]\n\t(No symbol) [0x0x7ff640951431]\n\t(No symbol) [0x0x7ff6409521c3]\n\tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\n\tGetHandleVerifier [0x0x7ff640e27983+3028467]\n\tGetHandleVerifier [0x0x7ff640e4591d+3151245]\n\tGetHandleVerifier [0x0x7ff640b718ce+185662]\n\tGetHandleVerifier [0x0x7ff640b7978f+218111]\n\tGetHandleVerifier [0x0x7ff640b5fb84+112628]\n\tGetHandleVerifier [0x0x7ff640b5fd39+113065]\n\tGetHandleVerifier [0x0x7ff640b46d08+10616]\n\tBaseThreadInitThunk [0x0x7fff25c97034+20]\n\tRtlUserThreadStart [0x0x7fff27782651+33]", "trace": "self = <common.driver.DriverOperate object at 0x000002E70C1E73A0>\nele_info = {'name': '收件人', 'type': 'xpath', 'value': '//*[@id=\"dvContainer\"]/div[2]/div[1]/section/header/div[1]/div[1]/div/div[2]/div/input'}\n\n    def find_element(self, ele_info):\n        # ele_info = {\"name\":\"登录\",\"type\":\"linktext\",\"value\":\"登录\",\"timeout\":5}\n        # timeout可以不写，默认5秒超时\n        name = ele_info['name']\n        l_type = ele_info['type']\n        value = ele_info['value']\n        timeout = ele_info.get('timeout', 5)\n        locator = self.get_locator(ele_info)\n        # 使用显式等待来完成元素定位\n        try:\n            wait = WebDriverWait(driver=self.driver, timeout=timeout)\n>           element = wait.until(expected_conditions.presence_of_element_located(locator))\n\n..\\common\\driver.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"02daff65e66301506dcba8b2daf39f52\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002E70BDE7490>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff640b57005+76917]\nE       \tGetHandleVerifier [0x0x7ff640b57060+77008]\nE       \t(No symbol) [0x0x7ff640909dea]\nE       \t(No symbol) [0x0x7ff640960256]\nE       \t(No symbol) [0x0x7ff64096050c]\nE       \t(No symbol) [0x0x7ff6409b3887]\nE       \t(No symbol) [0x0x7ff6409884af]\nE       \t(No symbol) [0x0x7ff6409b065c]\nE       \t(No symbol) [0x0x7ff640988243]\nE       \t(No symbol) [0x0x7ff640951431]\nE       \t(No symbol) [0x0x7ff6409521c3]\nE       \tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\nE       \tGetHandleVerifier [0x0x7ff640e27983+3028467]\nE       \tGetHandleVerifier [0x0x7ff640e4591d+3151245]\nE       \tGetHandleVerifier [0x0x7ff640b718ce+185662]\nE       \tGetHandleVerifier [0x0x7ff640b7978f+218111]\nE       \tGetHandleVerifier [0x0x7ff640b5fb84+112628]\nE       \tGetHandleVerifier [0x0x7ff640b5fd39+113065]\nE       \tGetHandleVerifier [0x0x7ff640b46d08+10616]\nE       \tBaseThreadInitThunk [0x0x7fff25c97034+20]\nE       \tRtlUserThreadStart [0x0x7fff27782651+33]\n\nD:\\dev\\python\\python3.10.4\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_send_email.TestSend object at 0x000002E70C1E6980>\naddress = '', theme = '', body = '', success = False\nexpect_result = '请填写收件人地址后再发送'\n\n    @pytest.mark.parametrize(\"address, theme, body, success, expect_result\", parameter)\n    def test_send(self, address, theme, body, success, expect_result):\n        allure.dynamic.title(f'{expect_result}')\n    \n        global global_var\n        if global_var == 0:\n            global_var = 1\n            LoginActions().Login(\"wulilin55\", \"Wu@200255Lilin\")\n    \n        PageSendEmail().switch_frame_to_default()\n>       SendEmailActions().SendEmail(address, theme, body)\n\ntest_send_email.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\actions\\send_emailactions.py:13: in SendEmail\n    page.page_input_receiver(address)\n..\\pages\\page_send_email.py:34: in page_input_receiver\n    self.operate.send_keys(ele_info, receiver)\n..\\common\\driver.py:146: in send_keys\n    element = self.find_element(ele_info)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.driver.DriverOperate object at 0x000002E70C1E73A0>\nele_info = {'name': '收件人', 'type': 'xpath', 'value': '//*[@id=\"dvContainer\"]/div[2]/div[1]/section/header/div[1]/div[1]/div/div[2]/div/input'}\n\n    def find_element(self, ele_info):\n        # ele_info = {\"name\":\"登录\",\"type\":\"linktext\",\"value\":\"登录\",\"timeout\":5}\n        # timeout可以不写，默认5秒超时\n        name = ele_info['name']\n        l_type = ele_info['type']\n        value = ele_info['value']\n        timeout = ele_info.get('timeout', 5)\n        locator = self.get_locator(ele_info)\n        # 使用显式等待来完成元素定位\n        try:\n            wait = WebDriverWait(driver=self.driver, timeout=timeout)\n            element = wait.until(expected_conditions.presence_of_element_located(locator))\n            self.logger.info(f'定位元素【{name}】,通过【{l_type}】,值是【{value}】,定位成功')\n            return element\n        except BaseException as e:\n            self.logger.exception(f'定位元素【{name}】,通过【{l_type}】,值是【{value}】,定位失败')\n>           raise BaseException(f'定位元素【{name}】,通过【{l_type}】,值是【{value}】,定位失败:{e}')\nE           BaseException: 定位元素【收件人】,通过【xpath】,值是【//*[@id=\"dvContainer\"]/div[2]/div[1]/section/header/div[1]/div[1]/div/div[2]/div/input】,定位失败:Message: \nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff640b57005+76917]\nE           \tGetHandleVerifier [0x0x7ff640b57060+77008]\nE           \t(No symbol) [0x0x7ff640909dea]\nE           \t(No symbol) [0x0x7ff640960256]\nE           \t(No symbol) [0x0x7ff64096050c]\nE           \t(No symbol) [0x0x7ff6409b3887]\nE           \t(No symbol) [0x0x7ff6409884af]\nE           \t(No symbol) [0x0x7ff6409b065c]\nE           \t(No symbol) [0x0x7ff640988243]\nE           \t(No symbol) [0x0x7ff640951431]\nE           \t(No symbol) [0x0x7ff6409521c3]\nE           \tGetHandleVerifier [0x0x7ff640e2d32d+3051421]\nE           \tGetHandleVerifier [0x0x7ff640e27983+3028467]\nE           \tGetHandleVerifier [0x0x7ff640e4591d+3151245]\nE           \tGetHandleVerifier [0x0x7ff640b718ce+185662]\nE           \tGetHandleVerifier [0x0x7ff640b7978f+218111]\nE           \tGetHandleVerifier [0x0x7ff640b5fb84+112628]\nE           \tGetHandleVerifier [0x0x7ff640b5fd39+113065]\nE           \tGetHandleVerifier [0x0x7ff640b46d08+10616]\nE           \tBaseThreadInitThunk [0x0x7fff25c97034+20]\nE           \tRtlUserThreadStart [0x0x7fff27782651+33]\n\n..\\common\\driver.py:107: BaseException"}, "attachments": [{"name": "log", "source": "bc87a7e6-c45a-4500-bf66-716b4056355a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "address", "value": "''"}, {"name": "theme", "value": "''"}, {"name": "body", "value": "''"}, {"name": "success", "value": "False"}, {"name": "expect_result", "value": "'请填写收件人地址后再发送'"}], "start": 1752825420664, "stop": 1752825433358, "uuid": "031a8aa5-561f-4733-a974-b3ff9c408a71", "historyId": "21252a5dbbc8430a04699a497c4a59f9", "testCaseId": "7cbe8fc4e09c11fc1c4e46043da50016", "fullName": "testcases.test_send_email.TestSend#test_send", "labels": [{"name": "epic", "value": "163邮箱网站发送邮件测试"}, {"name": "feature", "value": "发送邮件测试"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_send_email"}, {"name": "subSuite", "value": "TestSend"}, {"name": "host", "value": "DESKTOP-LOC9ENU"}, {"name": "thread", "value": "4172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_send_email"}]}