{"name": "请填写收件人地址后再发送", "status": "broken", "statusDetails": {"message": "BaseException: 点击元素【写信】,通过【xpath】,值是【//li[@role='button' and .//span[text()='写 信']]】,点击失败:Message:", "trace": "self = <common.driver.DriverOperate object at 0x0000024B5878C190>\nele_info = {'name': '写信', 'type': 'xpath', 'value': \"//li[@role='button' and .//span[text()='写 信']]\"}\n\n    def click(self, ele_info):\n        name = ele_info['name']\n        type = ele_info['type']\n        value = ele_info['value']\n        timeout = ele_info.get('timeout', 5)\n        locator = self.get_locator(ele_info)\n        try:\n            wait = WebDriverWait(driver=self.driver, timeout=timeout)\n>           wait.until(click_success(locator))\n\n..\\common\\driver.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f86d554b7cc49a43bbf9c06518a891dd\")>\nmethod = <function click_success.<locals>._predicate at 0x0000024B588112D0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\dev\\python\\python3.10.4\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_send_email.TestSend object at 0x0000024B587076A0>\naddress = '', theme = '', body = '', success = False\nexpect_result = '请填写收件人地址后再发送'\n\n    @pytest.mark.parametrize(\"address, theme, body, success, expect_result\", parameter)\n    def test_send(self, address, theme, body, success, expect_result):\n        allure.dynamic.title(f'{expect_result}')\n    \n        global global_var\n        if global_var == 0:\n            global_var = 1\n            LoginActions().Login(\"wulilin55\", \"Wu@200255Lilin\")\n        # PageSendEmail().switch_frame_to_default()\n        DriverOperate.globalDriverOperate.switch_to_default()\n    \n>       SendEmailActions().SendEmail(address, theme, body)\n\ntest_send_email.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\actions\\send_emailactions.py:11: in SendEmail\n    page.page_click_write_email()\n..\\pages\\page_send_email.py:26: in page_click_write_email\n    self.operate.click(ele_info)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.driver.DriverOperate object at 0x0000024B5878C190>\nele_info = {'name': '写信', 'type': 'xpath', 'value': \"//li[@role='button' and .//span[text()='写 信']]\"}\n\n    def click(self, ele_info):\n        name = ele_info['name']\n        type = ele_info['type']\n        value = ele_info['value']\n        timeout = ele_info.get('timeout', 5)\n        locator = self.get_locator(ele_info)\n        try:\n            wait = WebDriverWait(driver=self.driver, timeout=timeout)\n            wait.until(click_success(locator))\n            self.logger.info(f'点击元素【{name}】,通过【{type}】,值是【{value}】,点击成功')\n        except BaseException as e:\n            self.logger.exception(f'点击元素【{name}】,通过【{type}】,值是【{value}】,点击失败')\n>           raise BaseException(f'点击元素【{name}】,通过【{type}】,值是【{value}】,点击失败:{e}')\nE           BaseException: 点击元素【写信】,通过【xpath】,值是【//li[@role='button' and .//span[text()='写 信']]】,点击失败:Message:\n\n..\\common\\driver.py:139: BaseException"}, "attachments": [{"name": "log", "source": "9d3a11e0-7619-4a11-a7ff-477b1695b953-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0ead6eb0-c059-45e7-a931-418ef62df95a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "address", "value": "''"}, {"name": "theme", "value": "''"}, {"name": "body", "value": "''"}, {"name": "success", "value": "False"}, {"name": "expect_result", "value": "'请填写收件人地址后再发送'"}], "start": 1752842279074, "stop": 1752842289602, "uuid": "1e0ba677-263f-4ff3-a085-73c5eb788a4e", "historyId": "21252a5dbbc8430a04699a497c4a59f9", "testCaseId": "7cbe8fc4e09c11fc1c4e46043da50016", "fullName": "testcases.test_send_email.TestSend#test_send", "labels": [{"name": "feature", "value": "发送邮件测试"}, {"name": "epic", "value": "163邮箱网站发送邮件测试"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_send_email"}, {"name": "subSuite", "value": "TestSend"}, {"name": "host", "value": "DESKTOP-LOC9ENU"}, {"name": "thread", "value": "20120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_send_email"}]}